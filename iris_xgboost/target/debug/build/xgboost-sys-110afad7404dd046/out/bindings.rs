/* automatically generated by rust-bindgen */

pub const __DARWIN_ONLY_64_BIT_INO_T: u32 = 1;
pub const __DARWIN_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const __DARWIN_ONLY_VERS_1050: u32 = 1;
pub const __DARWIN_UNIX03: u32 = 1;
pub const __DARWIN_64_BIT_INO_T: u32 = 1;
pub const __DARWIN_VERS_1050: u32 = 1;
pub const __DARWIN_NON_CANCELABLE: u32 = 0;
pub const __DARWIN_SUF_EXTSN: &'static [u8; 14usize] = b"$DARWIN_EXTSN\0";
pub const __DARWIN_C_ANSI: u32 = 4096;
pub const __DARWIN_C_FULL: u32 = 900000;
pub const __DARWIN_C_LEVEL: u32 = 900000;
pub const __STDC_WANT_LIB_EXT1__: u32 = 1;
pub const __DARWIN_NO_LONG_LONG: u32 = 0;
pub const _DARWIN_FEATURE_64_BIT_INODE: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_64_BIT_INODE: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_VERS_1050: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const _DARWIN_FEATURE_UNIX_CONFORMANCE: u32 = 3;
pub const __API_TO_BE_DEPRECATED: u32 = 100000;
pub const __MAC_10_0: u32 = 1000;
pub const __MAC_10_1: u32 = 1010;
pub const __MAC_10_2: u32 = 1020;
pub const __MAC_10_3: u32 = 1030;
pub const __MAC_10_4: u32 = 1040;
pub const __MAC_10_5: u32 = 1050;
pub const __MAC_10_6: u32 = 1060;
pub const __MAC_10_7: u32 = 1070;
pub const __MAC_10_8: u32 = 1080;
pub const __MAC_10_9: u32 = 1090;
pub const __MAC_10_10: u32 = 101000;
pub const __MAC_10_10_2: u32 = 101002;
pub const __MAC_10_10_3: u32 = 101003;
pub const __MAC_10_11: u32 = 101100;
pub const __MAC_10_11_2: u32 = 101102;
pub const __MAC_10_11_3: u32 = 101103;
pub const __MAC_10_11_4: u32 = 101104;
pub const __MAC_10_12: u32 = 101200;
pub const __MAC_10_12_1: u32 = 101201;
pub const __MAC_10_12_2: u32 = 101202;
pub const __MAC_10_12_4: u32 = 101204;
pub const __MAC_10_13: u32 = 101300;
pub const __MAC_10_13_1: u32 = 101301;
pub const __MAC_10_13_2: u32 = 101302;
pub const __MAC_10_13_4: u32 = 101304;
pub const __MAC_10_14: u32 = 101400;
pub const __MAC_10_14_1: u32 = 101401;
pub const __MAC_10_14_4: u32 = 101404;
pub const __MAC_10_14_6: u32 = 101406;
pub const __MAC_10_15: u32 = 101500;
pub const __MAC_10_15_1: u32 = 101501;
pub const __MAC_10_15_4: u32 = 101504;
pub const __MAC_10_16: u32 = 101600;
pub const __MAC_11_0: u32 = 110000;
pub const __MAC_11_1: u32 = 110100;
pub const __MAC_11_3: u32 = 110300;
pub const __MAC_11_4: u32 = 110400;
pub const __MAC_11_5: u32 = 110500;
pub const __MAC_11_6: u32 = 110600;
pub const __MAC_12_0: u32 = 120000;
pub const __MAC_12_1: u32 = 120100;
pub const __IPHONE_2_0: u32 = 20000;
pub const __IPHONE_2_1: u32 = 20100;
pub const __IPHONE_2_2: u32 = 20200;
pub const __IPHONE_3_0: u32 = 30000;
pub const __IPHONE_3_1: u32 = 30100;
pub const __IPHONE_3_2: u32 = 30200;
pub const __IPHONE_4_0: u32 = 40000;
pub const __IPHONE_4_1: u32 = 40100;
pub const __IPHONE_4_2: u32 = 40200;
pub const __IPHONE_4_3: u32 = 40300;
pub const __IPHONE_5_0: u32 = 50000;
pub const __IPHONE_5_1: u32 = 50100;
pub const __IPHONE_6_0: u32 = 60000;
pub const __IPHONE_6_1: u32 = 60100;
pub const __IPHONE_7_0: u32 = 70000;
pub const __IPHONE_7_1: u32 = 70100;
pub const __IPHONE_8_0: u32 = 80000;
pub const __IPHONE_8_1: u32 = 80100;
pub const __IPHONE_8_2: u32 = 80200;
pub const __IPHONE_8_3: u32 = 80300;
pub const __IPHONE_8_4: u32 = 80400;
pub const __IPHONE_9_0: u32 = 90000;
pub const __IPHONE_9_1: u32 = 90100;
pub const __IPHONE_9_2: u32 = 90200;
pub const __IPHONE_9_3: u32 = 90300;
pub const __IPHONE_10_0: u32 = 100000;
pub const __IPHONE_10_1: u32 = 100100;
pub const __IPHONE_10_2: u32 = 100200;
pub const __IPHONE_10_3: u32 = 100300;
pub const __IPHONE_11_0: u32 = 110000;
pub const __IPHONE_11_1: u32 = 110100;
pub const __IPHONE_11_2: u32 = 110200;
pub const __IPHONE_11_3: u32 = 110300;
pub const __IPHONE_11_4: u32 = 110400;
pub const __IPHONE_12_0: u32 = 120000;
pub const __IPHONE_12_1: u32 = 120100;
pub const __IPHONE_12_2: u32 = 120200;
pub const __IPHONE_12_3: u32 = 120300;
pub const __IPHONE_12_4: u32 = 120400;
pub const __IPHONE_13_0: u32 = 130000;
pub const __IPHONE_13_1: u32 = 130100;
pub const __IPHONE_13_2: u32 = 130200;
pub const __IPHONE_13_3: u32 = 130300;
pub const __IPHONE_13_4: u32 = 130400;
pub const __IPHONE_13_5: u32 = 130500;
pub const __IPHONE_13_6: u32 = 130600;
pub const __IPHONE_13_7: u32 = 130700;
pub const __IPHONE_14_0: u32 = 140000;
pub const __IPHONE_14_1: u32 = 140100;
pub const __IPHONE_14_2: u32 = 140200;
pub const __IPHONE_14_3: u32 = 140300;
pub const __IPHONE_14_5: u32 = 140500;
pub const __IPHONE_14_6: u32 = 140600;
pub const __IPHONE_14_7: u32 = 140700;
pub const __IPHONE_14_8: u32 = 140800;
pub const __IPHONE_15_0: u32 = 150000;
pub const __IPHONE_15_1: u32 = 150100;
pub const __IPHONE_15_2: u32 = 150200;
pub const __TVOS_9_0: u32 = 90000;
pub const __TVOS_9_1: u32 = 90100;
pub const __TVOS_9_2: u32 = 90200;
pub const __TVOS_10_0: u32 = 100000;
pub const __TVOS_10_0_1: u32 = 100001;
pub const __TVOS_10_1: u32 = 100100;
pub const __TVOS_10_2: u32 = 100200;
pub const __TVOS_11_0: u32 = 110000;
pub const __TVOS_11_1: u32 = 110100;
pub const __TVOS_11_2: u32 = 110200;
pub const __TVOS_11_3: u32 = 110300;
pub const __TVOS_11_4: u32 = 110400;
pub const __TVOS_12_0: u32 = 120000;
pub const __TVOS_12_1: u32 = 120100;
pub const __TVOS_12_2: u32 = 120200;
pub const __TVOS_12_3: u32 = 120300;
pub const __TVOS_12_4: u32 = 120400;
pub const __TVOS_13_0: u32 = 130000;
pub const __TVOS_13_2: u32 = 130200;
pub const __TVOS_13_3: u32 = 130300;
pub const __TVOS_13_4: u32 = 130400;
pub const __TVOS_14_0: u32 = 140000;
pub const __TVOS_14_1: u32 = 140100;
pub const __TVOS_14_2: u32 = 140200;
pub const __TVOS_14_3: u32 = 140300;
pub const __TVOS_14_5: u32 = 140500;
pub const __TVOS_14_6: u32 = 140600;
pub const __TVOS_14_7: u32 = 140700;
pub const __TVOS_15_0: u32 = 150000;
pub const __TVOS_15_1: u32 = 150100;
pub const __TVOS_15_2: u32 = 150200;
pub const __WATCHOS_1_0: u32 = 10000;
pub const __WATCHOS_2_0: u32 = 20000;
pub const __WATCHOS_2_1: u32 = 20100;
pub const __WATCHOS_2_2: u32 = 20200;
pub const __WATCHOS_3_0: u32 = 30000;
pub const __WATCHOS_3_1: u32 = 30100;
pub const __WATCHOS_3_1_1: u32 = 30101;
pub const __WATCHOS_3_2: u32 = 30200;
pub const __WATCHOS_4_0: u32 = 40000;
pub const __WATCHOS_4_1: u32 = 40100;
pub const __WATCHOS_4_2: u32 = 40200;
pub const __WATCHOS_4_3: u32 = 40300;
pub const __WATCHOS_5_0: u32 = 50000;
pub const __WATCHOS_5_1: u32 = 50100;
pub const __WATCHOS_5_2: u32 = 50200;
pub const __WATCHOS_5_3: u32 = 50300;
pub const __WATCHOS_6_0: u32 = 60000;
pub const __WATCHOS_6_1: u32 = 60100;
pub const __WATCHOS_6_2: u32 = 60200;
pub const __WATCHOS_7_0: u32 = 70000;
pub const __WATCHOS_7_1: u32 = 70100;
pub const __WATCHOS_7_2: u32 = 70200;
pub const __WATCHOS_7_3: u32 = 70300;
pub const __WATCHOS_7_4: u32 = 70400;
pub const __WATCHOS_7_5: u32 = 70500;
pub const __WATCHOS_7_6: u32 = 70600;
pub const __WATCHOS_8_0: u32 = 80000;
pub const __WATCHOS_8_1: u32 = 80100;
pub const __WATCHOS_8_3: u32 = 80300;
pub const MAC_OS_X_VERSION_10_0: u32 = 1000;
pub const MAC_OS_X_VERSION_10_1: u32 = 1010;
pub const MAC_OS_X_VERSION_10_2: u32 = 1020;
pub const MAC_OS_X_VERSION_10_3: u32 = 1030;
pub const MAC_OS_X_VERSION_10_4: u32 = 1040;
pub const MAC_OS_X_VERSION_10_5: u32 = 1050;
pub const MAC_OS_X_VERSION_10_6: u32 = 1060;
pub const MAC_OS_X_VERSION_10_7: u32 = 1070;
pub const MAC_OS_X_VERSION_10_8: u32 = 1080;
pub const MAC_OS_X_VERSION_10_9: u32 = 1090;
pub const MAC_OS_X_VERSION_10_10: u32 = 101000;
pub const MAC_OS_X_VERSION_10_10_2: u32 = 101002;
pub const MAC_OS_X_VERSION_10_10_3: u32 = 101003;
pub const MAC_OS_X_VERSION_10_11: u32 = 101100;
pub const MAC_OS_X_VERSION_10_11_2: u32 = 101102;
pub const MAC_OS_X_VERSION_10_11_3: u32 = 101103;
pub const MAC_OS_X_VERSION_10_11_4: u32 = 101104;
pub const MAC_OS_X_VERSION_10_12: u32 = 101200;
pub const MAC_OS_X_VERSION_10_12_1: u32 = 101201;
pub const MAC_OS_X_VERSION_10_12_2: u32 = 101202;
pub const MAC_OS_X_VERSION_10_12_4: u32 = 101204;
pub const MAC_OS_X_VERSION_10_13: u32 = 101300;
pub const MAC_OS_X_VERSION_10_13_1: u32 = 101301;
pub const MAC_OS_X_VERSION_10_13_2: u32 = 101302;
pub const MAC_OS_X_VERSION_10_13_4: u32 = 101304;
pub const MAC_OS_X_VERSION_10_14: u32 = 101400;
pub const MAC_OS_X_VERSION_10_14_1: u32 = 101401;
pub const MAC_OS_X_VERSION_10_14_4: u32 = 101404;
pub const MAC_OS_X_VERSION_10_14_6: u32 = 101406;
pub const MAC_OS_X_VERSION_10_15: u32 = 101500;
pub const MAC_OS_X_VERSION_10_15_1: u32 = 101501;
pub const MAC_OS_X_VERSION_10_16: u32 = 101600;
pub const MAC_OS_VERSION_11_0: u32 = 110000;
pub const MAC_OS_VERSION_12_0: u32 = 120000;
pub const __DRIVERKIT_19_0: u32 = 190000;
pub const __DRIVERKIT_20_0: u32 = 200000;
pub const __DRIVERKIT_21_0: u32 = 210000;
pub const __MAC_OS_X_VERSION_MAX_ALLOWED: u32 = 120100;
pub const __ENABLE_LEGACY_MAC_AVAILABILITY: u32 = 1;
pub const __PTHREAD_SIZE__: u32 = 8176;
pub const __PTHREAD_ATTR_SIZE__: u32 = 56;
pub const __PTHREAD_MUTEXATTR_SIZE__: u32 = 8;
pub const __PTHREAD_MUTEX_SIZE__: u32 = 56;
pub const __PTHREAD_CONDATTR_SIZE__: u32 = 8;
pub const __PTHREAD_COND_SIZE__: u32 = 40;
pub const __PTHREAD_ONCE_SIZE__: u32 = 8;
pub const __PTHREAD_RWLOCK_SIZE__: u32 = 192;
pub const __PTHREAD_RWLOCKATTR_SIZE__: u32 = 16;
pub const __DARWIN_WCHAR_MIN: i32 = -2147483648;
pub const _FORTIFY_SOURCE: u32 = 2;
pub const RENAME_SECLUDE: u32 = 1;
pub const RENAME_SWAP: u32 = 2;
pub const RENAME_EXCL: u32 = 4;
pub const __SLBF: u32 = 1;
pub const __SNBF: u32 = 2;
pub const __SRD: u32 = 4;
pub const __SWR: u32 = 8;
pub const __SRW: u32 = 16;
pub const __SEOF: u32 = 32;
pub const __SERR: u32 = 64;
pub const __SMBF: u32 = 128;
pub const __SAPP: u32 = 256;
pub const __SSTR: u32 = 512;
pub const __SOPT: u32 = 1024;
pub const __SNPT: u32 = 2048;
pub const __SOFF: u32 = 4096;
pub const __SMOD: u32 = 8192;
pub const __SALC: u32 = 16384;
pub const __SIGN: u32 = 32768;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 1024;
pub const EOF: i32 = -1;
pub const FOPEN_MAX: u32 = 20;
pub const FILENAME_MAX: u32 = 1024;
pub const P_tmpdir: &'static [u8; 10usize] = b"/var/tmp/\0";
pub const L_tmpnam: u32 = 1024;
pub const TMP_MAX: u32 = 308915776;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const L_ctermid: u32 = 1024;
pub const _USE_FORTIFY_LEVEL: u32 = 2;
pub const __WORDSIZE: u32 = 64;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const INT64_MAX: u64 = 9223372036854775807;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT64_MIN: i64 = -9223372036854775808;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const UINT64_MAX: i32 = -1;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST64_MIN: i64 = -9223372036854775808;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const INT_LEAST64_MAX: u64 = 9223372036854775807;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const UINT_LEAST64_MAX: i32 = -1;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i32 = -32768;
pub const INT_FAST32_MIN: i32 = -2147483648;
pub const INT_FAST64_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u32 = 32767;
pub const INT_FAST32_MAX: u32 = 2147483647;
pub const INT_FAST64_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: u32 = 65535;
pub const UINT_FAST32_MAX: u32 = 4294967295;
pub const UINT_FAST64_MAX: i32 = -1;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const UINTPTR_MAX: i32 = -1;
pub const SIZE_MAX: i32 = -1;
pub const RSIZE_MAX: i32 = -1;
pub const WINT_MIN: i32 = -2147483648;
pub const WINT_MAX: u32 = 2147483647;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_longlong;
pub type __uint64_t = ::std::os::raw::c_ulonglong;
pub type __darwin_intptr_t = ::std::os::raw::c_long;
pub type __darwin_natural_t = ::std::os::raw::c_uint;
pub type __darwin_ct_rune_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t {
    pub __mbstate8: [::std::os::raw::c_char; 128usize],
    pub _mbstateL: ::std::os::raw::c_longlong,
    _bindgen_union_align: [u64; 16usize],
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t>(),
        128usize,
        concat!("Size of: ", stringify!(__mbstate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__mbstate_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__mbstate8 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__mbstate8)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>()))._mbstateL as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(_mbstateL)
        )
    );
}
pub type __darwin_mbstate_t = __mbstate_t;
pub type __darwin_ptrdiff_t = ::std::os::raw::c_long;
pub type __darwin_size_t = ::std::os::raw::c_ulong;
pub type __darwin_va_list = __builtin_va_list;
pub type __darwin_wchar_t = ::std::os::raw::c_int;
pub type __darwin_rune_t = __darwin_wchar_t;
pub type __darwin_wint_t = ::std::os::raw::c_int;
pub type __darwin_clock_t = ::std::os::raw::c_ulong;
pub type __darwin_socklen_t = __uint32_t;
pub type __darwin_ssize_t = ::std::os::raw::c_long;
pub type __darwin_time_t = ::std::os::raw::c_long;
pub type __darwin_blkcnt_t = __int64_t;
pub type __darwin_blksize_t = __int32_t;
pub type __darwin_dev_t = __int32_t;
pub type __darwin_fsblkcnt_t = ::std::os::raw::c_uint;
pub type __darwin_fsfilcnt_t = ::std::os::raw::c_uint;
pub type __darwin_gid_t = __uint32_t;
pub type __darwin_id_t = __uint32_t;
pub type __darwin_ino64_t = __uint64_t;
pub type __darwin_ino_t = __darwin_ino64_t;
pub type __darwin_mach_port_name_t = __darwin_natural_t;
pub type __darwin_mach_port_t = __darwin_mach_port_name_t;
pub type __darwin_mode_t = __uint16_t;
pub type __darwin_off_t = __int64_t;
pub type __darwin_pid_t = __int32_t;
pub type __darwin_sigset_t = __uint32_t;
pub type __darwin_suseconds_t = __int32_t;
pub type __darwin_uid_t = __uint32_t;
pub type __darwin_useconds_t = __uint32_t;
pub type __darwin_uuid_t = [::std::os::raw::c_uchar; 16usize];
pub type __darwin_uuid_string_t = [::std::os::raw::c_char; 37usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_pthread_handler_rec {
    pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __arg: *mut ::std::os::raw::c_void,
    pub __next: *mut __darwin_pthread_handler_rec,
}
#[test]
fn bindgen_test_layout___darwin_pthread_handler_rec() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_pthread_handler_rec>(),
        24usize,
        concat!("Size of: ", stringify!(__darwin_pthread_handler_rec))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_pthread_handler_rec>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_pthread_handler_rec))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_pthread_handler_rec>())).__routine as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__routine)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_pthread_handler_rec>())).__arg as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__arg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_pthread_handler_rec>())).__next as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__next)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_attr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_attr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_attr_t>(),
        64usize,
        concat!("Size of: ", stringify!(_opaque_pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_attr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_attr_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_attr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_attr_t>())).__opaque as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_attr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_cond_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 40usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_cond_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(_opaque_pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_cond_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_cond_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_cond_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_cond_t>())).__opaque as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_cond_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_condattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_condattr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_condattr_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_condattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_condattr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_condattr_t>())).__sig as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_condattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_condattr_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_condattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_mutex_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_mutex_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_mutex_t>(),
        64usize,
        concat!("Size of: ", stringify!(_opaque_pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_mutex_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_mutex_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutex_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_mutex_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutex_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutexattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_mutexattr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_mutexattr_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_mutexattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_mutexattr_t>())).__sig as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutexattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_mutexattr_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutexattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_once_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_once_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_once_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_once_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_once_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_once_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_once_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_once_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_once_t>())).__opaque as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_once_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_rwlock_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 192usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_rwlock_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_rwlock_t>(),
        200usize,
        concat!("Size of: ", stringify!(_opaque_pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_rwlock_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlock_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_rwlock_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlock_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlockattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 16usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_rwlockattr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_rwlockattr_t>(),
        24usize,
        concat!("Size of: ", stringify!(_opaque_pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_rwlockattr_t>())).__sig as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlockattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_rwlockattr_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlockattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_t {
    pub __sig: ::std::os::raw::c_long,
    pub __cleanup_stack: *mut __darwin_pthread_handler_rec,
    pub __opaque: [::std::os::raw::c_char; 8176usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_t>(),
        8192usize,
        concat!("Size of: ", stringify!(_opaque_pthread_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_t>())).__cleanup_stack as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__cleanup_stack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_t>())).__opaque as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__opaque)
        )
    );
}
pub type __darwin_pthread_attr_t = _opaque_pthread_attr_t;
pub type __darwin_pthread_cond_t = _opaque_pthread_cond_t;
pub type __darwin_pthread_condattr_t = _opaque_pthread_condattr_t;
pub type __darwin_pthread_key_t = ::std::os::raw::c_ulong;
pub type __darwin_pthread_mutex_t = _opaque_pthread_mutex_t;
pub type __darwin_pthread_mutexattr_t = _opaque_pthread_mutexattr_t;
pub type __darwin_pthread_once_t = _opaque_pthread_once_t;
pub type __darwin_pthread_rwlock_t = _opaque_pthread_rwlock_t;
pub type __darwin_pthread_rwlockattr_t = _opaque_pthread_rwlockattr_t;
pub type __darwin_pthread_t = *mut _opaque_pthread_t;
pub type __darwin_nl_item = ::std::os::raw::c_int;
pub type __darwin_wctrans_t = ::std::os::raw::c_int;
pub type __darwin_wctype_t = __uint32_t;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulonglong;
pub type register_t = i64;
pub type user_addr_t = u_int64_t;
pub type user_size_t = u_int64_t;
pub type user_ssize_t = i64;
pub type user_long_t = i64;
pub type user_ulong_t = u_int64_t;
pub type user_time_t = i64;
pub type user_off_t = i64;
pub type syscall_arg_t = u_int64_t;
pub type va_list = __darwin_va_list;
extern "C" {
    #[link_name = "\u{1}_renameat"]
    pub fn renameat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_renamex_np"]
    pub fn renamex_np(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_renameatx_np"]
    pub fn renameatx_np(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
pub type fpos_t = __darwin_off_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sbuf {
    pub _base: *mut ::std::os::raw::c_uchar,
    pub _size: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___sbuf() {
    assert_eq!(
        ::std::mem::size_of::<__sbuf>(),
        16usize,
        concat!("Size of: ", stringify!(__sbuf))
    );
    assert_eq!(
        ::std::mem::align_of::<__sbuf>(),
        8usize,
        concat!("Alignment of ", stringify!(__sbuf))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sbuf>()))._base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sbuf),
            "::",
            stringify!(_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sbuf>()))._size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__sbuf),
            "::",
            stringify!(_size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sFILEX {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sFILE {
    pub _p: *mut ::std::os::raw::c_uchar,
    pub _r: ::std::os::raw::c_int,
    pub _w: ::std::os::raw::c_int,
    pub _flags: ::std::os::raw::c_short,
    pub _file: ::std::os::raw::c_short,
    pub _bf: __sbuf,
    pub _lbfsize: ::std::os::raw::c_int,
    pub _cookie: *mut ::std::os::raw::c_void,
    pub _close: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
    >,
    pub _read: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: *mut ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub _seek: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: fpos_t,
            arg3: ::std::os::raw::c_int,
        ) -> fpos_t,
    >,
    pub _write: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: *const ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub _ub: __sbuf,
    pub _extra: *mut __sFILEX,
    pub _ur: ::std::os::raw::c_int,
    pub _ubuf: [::std::os::raw::c_uchar; 3usize],
    pub _nbuf: [::std::os::raw::c_uchar; 1usize],
    pub _lb: __sbuf,
    pub _blksize: ::std::os::raw::c_int,
    pub _offset: fpos_t,
}
#[test]
fn bindgen_test_layout___sFILE() {
    assert_eq!(
        ::std::mem::size_of::<__sFILE>(),
        152usize,
        concat!("Size of: ", stringify!(__sFILE))
    );
    assert_eq!(
        ::std::mem::align_of::<__sFILE>(),
        8usize,
        concat!("Alignment of ", stringify!(__sFILE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._p as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_p)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._r as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_r)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._w as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_w)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._flags as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._file as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_file)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._bf as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_bf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._lbfsize as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_lbfsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._cookie as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_cookie)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._close as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_close)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._read as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_read)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._seek as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_seek)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._write as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_write)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._ub as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_ub)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._extra as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_extra)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._ur as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_ur)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._ubuf as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_ubuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._nbuf as *const _ as usize },
        119usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_nbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._lb as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_lb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._blksize as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_blksize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._offset as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_offset)
        )
    );
}
pub type FILE = __sFILE;
extern "C" {
    #[link_name = "\u{1}___stdinp"]
    pub static mut __stdinp: *mut FILE;
}
extern "C" {
    #[link_name = "\u{1}___stdoutp"]
    pub static mut __stdoutp: *mut FILE;
}
extern "C" {
    #[link_name = "\u{1}___stderrp"]
    pub static mut __stderrp: *mut FILE;
}
extern "C" {
    #[link_name = "\u{1}_clearerr"]
    pub fn clearerr(arg1: *mut FILE);
}
extern "C" {
    #[link_name = "\u{1}_fclose"]
    pub fn fclose(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_feof"]
    pub fn feof(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ferror"]
    pub fn ferror(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_fflush"]
    pub fn fflush(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_fgetc"]
    pub fn fgetc(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_fgetpos"]
    pub fn fgetpos(arg1: *mut FILE, arg2: *mut fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_fgets"]
    pub fn fgets(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_fopen"]
    pub fn fopen(
        __filename: *const ::std::os::raw::c_char,
        __mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    #[link_name = "\u{1}_fprintf"]
    pub fn fprintf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_fputc"]
    pub fn fputc(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_fputs"]
    pub fn fputs(arg1: *const ::std::os::raw::c_char, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_fread"]
    pub fn fread(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
        __nitems: usize,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    #[link_name = "\u{1}_freopen"]
    pub fn freopen(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    #[link_name = "\u{1}_fscanf"]
    pub fn fscanf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_fseek"]
    pub fn fseek(
        arg1: *mut FILE,
        arg2: ::std::os::raw::c_long,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_fsetpos"]
    pub fn fsetpos(arg1: *mut FILE, arg2: *const fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ftell"]
    pub fn ftell(arg1: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    #[link_name = "\u{1}_fwrite"]
    pub fn fwrite(
        __ptr: *const ::std::os::raw::c_void,
        __size: usize,
        __nitems: usize,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    #[link_name = "\u{1}_getc"]
    pub fn getc(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_getchar"]
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_gets"]
    pub fn gets(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_perror"]
    pub fn perror(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}_printf"]
    pub fn printf(arg1: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_putc"]
    pub fn putc(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_putchar"]
    pub fn putchar(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_puts"]
    pub fn puts(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_remove"]
    pub fn remove(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_rename"]
    pub fn rename(
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_rewind"]
    pub fn rewind(arg1: *mut FILE);
}
extern "C" {
    #[link_name = "\u{1}_scanf"]
    pub fn scanf(arg1: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_setbuf"]
    pub fn setbuf(arg1: *mut FILE, arg2: *mut ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}_setvbuf"]
    pub fn setvbuf(
        arg1: *mut FILE,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_sprintf"]
    pub fn sprintf(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_sscanf"]
    pub fn sscanf(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_tmpfile"]
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    #[link_name = "\u{1}_tmpnam"]
    pub fn tmpnam(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_ungetc"]
    pub fn ungetc(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_vfprintf"]
    pub fn vfprintf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        arg3: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_vprintf"]
    pub fn vprintf(arg1: *const ::std::os::raw::c_char, arg2: va_list) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_vsprintf"]
    pub fn vsprintf(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ctermid"]
    pub fn ctermid(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_fdopen"]
    pub fn fdopen(arg1: ::std::os::raw::c_int, arg2: *const ::std::os::raw::c_char) -> *mut FILE;
}
extern "C" {
    #[link_name = "\u{1}_fileno"]
    pub fn fileno(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_pclose"]
    pub fn pclose(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_popen"]
    pub fn popen(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    #[link_name = "\u{1}___srget"]
    pub fn __srget(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}___svfscanf"]
    pub fn __svfscanf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        arg3: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}___swbuf"]
    pub fn __swbuf(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_flockfile"]
    pub fn flockfile(arg1: *mut FILE);
}
extern "C" {
    #[link_name = "\u{1}_ftrylockfile"]
    pub fn ftrylockfile(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_funlockfile"]
    pub fn funlockfile(arg1: *mut FILE);
}
extern "C" {
    #[link_name = "\u{1}_getc_unlocked"]
    pub fn getc_unlocked(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_getchar_unlocked"]
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_putc_unlocked"]
    pub fn putc_unlocked(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_putchar_unlocked"]
    pub fn putchar_unlocked(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_getw"]
    pub fn getw(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_putw"]
    pub fn putw(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_tempnam"]
    pub fn tempnam(
        __dir: *const ::std::os::raw::c_char,
        __prefix: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
pub type off_t = __darwin_off_t;
extern "C" {
    #[link_name = "\u{1}_fseeko"]
    pub fn fseeko(
        __stream: *mut FILE,
        __offset: off_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ftello"]
    pub fn ftello(__stream: *mut FILE) -> off_t;
}
extern "C" {
    #[link_name = "\u{1}_snprintf"]
    pub fn snprintf(
        __str: *mut ::std::os::raw::c_char,
        __size: usize,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_vfscanf"]
    pub fn vfscanf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        arg1: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_vscanf"]
    pub fn vscanf(__format: *const ::std::os::raw::c_char, arg1: va_list) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_vsnprintf"]
    pub fn vsnprintf(
        __str: *mut ::std::os::raw::c_char,
        __size: usize,
        __format: *const ::std::os::raw::c_char,
        arg1: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_vsscanf"]
    pub fn vsscanf(
        __str: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        arg1: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_dprintf"]
    pub fn dprintf(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_vdprintf"]
    pub fn vdprintf(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_getdelim"]
    pub fn getdelim(
        __linep: *mut *mut ::std::os::raw::c_char,
        __linecapp: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> isize;
}
extern "C" {
    #[link_name = "\u{1}_getline"]
    pub fn getline(
        __linep: *mut *mut ::std::os::raw::c_char,
        __linecapp: *mut usize,
        __stream: *mut FILE,
    ) -> isize;
}
extern "C" {
    #[link_name = "\u{1}_fmemopen"]
    pub fn fmemopen(
        __buf: *mut ::std::os::raw::c_void,
        __size: usize,
        __mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    #[link_name = "\u{1}_open_memstream"]
    pub fn open_memstream(
        __bufp: *mut *mut ::std::os::raw::c_char,
        __sizep: *mut usize,
    ) -> *mut FILE;
}
extern "C" {
    #[link_name = "\u{1}_sys_nerr"]
    pub static mut sys_nerr: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_sys_errlist"]
    pub static mut sys_errlist: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    #[link_name = "\u{1}_asprintf"]
    pub fn asprintf(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ctermid_r"]
    pub fn ctermid_r(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_fgetln"]
    pub fn fgetln(arg1: *mut FILE, arg2: *mut usize) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_fmtcheck"]
    pub fn fmtcheck(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_fpurge"]
    pub fn fpurge(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_setbuffer"]
    pub fn setbuffer(
        arg1: *mut FILE,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_setlinebuf"]
    pub fn setlinebuf(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_vasprintf"]
    pub fn vasprintf(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_funopen"]
    pub fn funopen(
        arg1: *const ::std::os::raw::c_void,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *mut ::std::os::raw::c_char,
                arg3: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_int,
        >,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_char,
                arg3: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_int,
        >,
        arg4: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: fpos_t,
                arg3: ::std::os::raw::c_int,
            ) -> fpos_t,
        >,
        arg5: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
        >,
    ) -> *mut FILE;
}
extern "C" {
    #[link_name = "\u{1}___sprintf_chk"]
    pub fn __sprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: usize,
        arg4: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}___snprintf_chk"]
    pub fn __snprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: ::std::os::raw::c_int,
        arg4: usize,
        arg5: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}___vsprintf_chk"]
    pub fn __vsprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: usize,
        arg4: *const ::std::os::raw::c_char,
        arg5: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}___vsnprintf_chk"]
    pub fn __vsnprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: ::std::os::raw::c_int,
        arg4: usize,
        arg5: *const ::std::os::raw::c_char,
        arg6: va_list,
    ) -> ::std::os::raw::c_int;
}
pub type int_least8_t = i8;
pub type int_least16_t = i16;
pub type int_least32_t = i32;
pub type int_least64_t = i64;
pub type uint_least8_t = u8;
pub type uint_least16_t = u16;
pub type uint_least32_t = u32;
pub type uint_least64_t = u64;
pub type int_fast8_t = i8;
pub type int_fast16_t = i16;
pub type int_fast32_t = i32;
pub type int_fast64_t = i64;
pub type uint_fast8_t = u8;
pub type uint_fast16_t = u16;
pub type uint_fast32_t = u32;
pub type uint_fast64_t = u64;
pub type intmax_t = ::std::os::raw::c_long;
pub type uintmax_t = ::std::os::raw::c_ulong;
/// \brief rabit unsigned long type
pub type rbt_ulong = ::std::os::raw::c_ulong;
extern "C" {
    /// \brief intialize the rabit module,
    /// call this once before using anything
    /// The additional arguments is not necessary.
    /// Usually rabit will detect settings
    /// from environment variables.
    /// \param argc number of arguments in argv
    /// \param argv the array of input arguments
    #[link_name = "\u{1}_RabitInit"]
    pub fn RabitInit(argc: ::std::os::raw::c_int, argv: *mut *mut ::std::os::raw::c_char);
}
extern "C" {
    /// \brief finalize the rabit engine,
    /// call this function after you finished all jobs.
    #[link_name = "\u{1}_RabitFinalize"]
    pub fn RabitFinalize();
}
extern "C" {
    /// \brief get rank of current process
    /// \return rank number of worker
    ///
    #[link_name = "\u{1}_RabitGetRank"]
    pub fn RabitGetRank() -> ::std::os::raw::c_int;
}
extern "C" {
    /// \brief get total number of process
    /// \return total world size
    ///
    #[link_name = "\u{1}_RabitGetWorldSize"]
    pub fn RabitGetWorldSize() -> ::std::os::raw::c_int;
}
extern "C" {
    /// \brief get rank of current process
    /// \return if rabit is distributed
    ///
    #[link_name = "\u{1}_RabitIsDistributed"]
    pub fn RabitIsDistributed() -> ::std::os::raw::c_int;
}
extern "C" {
    /// \brief print the msg to the tracker,
    /// this function can be used to communicate the information of the progress to
    /// the user who monitors the tracker
    /// \param msg the message to be printed
    #[link_name = "\u{1}_RabitTrackerPrint"]
    pub fn RabitTrackerPrint(msg: *const ::std::os::raw::c_char);
}
extern "C" {
    /// \brief get name of processor
    /// \param out_name hold output string
    /// \param out_len hold length of output string
    /// \param max_len maximum buffer length of input
    #[link_name = "\u{1}_RabitGetProcessorName"]
    pub fn RabitGetProcessorName(
        out_name: *mut ::std::os::raw::c_char,
        out_len: *mut rbt_ulong,
        max_len: rbt_ulong,
    );
}
extern "C" {
    /// \brief broadcast an memory region to all others from root
    ///
    /// Example: int a = 1; Broadcast(&a, sizeof(a), root);
    /// \param sendrecv_data the pointer to send or recive buffer,
    /// \param size the size of the data
    /// \param root the root of process
    #[link_name = "\u{1}_RabitBroadcast"]
    pub fn RabitBroadcast(
        sendrecv_data: *mut ::std::os::raw::c_void,
        size: rbt_ulong,
        root: ::std::os::raw::c_int,
    );
}
extern "C" {
    /// \brief perform in-place allreduce, on sendrecvbuf
    /// this function is NOT thread-safe
    ///
    /// Example Usage: the following code gives sum of the result
    /// vector<int> data(10);
    /// ...
    /// Allreduce<op::Sum>(&data[0], data.size());
    /// ...
    /// \param sendrecvbuf buffer for both sending and recving data
    /// \param count number of elements to be reduced
    /// \param enum_dtype the enumeration of data type, see rabit::engine::mpi::DataType in engine.h of rabit include
    /// \param enum_op the enumeration of operation type, see rabit::engine::mpi::OpType in engine.h of rabit
    /// \param prepare_fun Lazy preprocessing function, if it is not NULL, prepare_fun(prepare_arg)
    /// will be called by the function before performing Allreduce, to intialize the data in sendrecvbuf_.
    /// If the result of Allreduce can be recovered directly, then prepare_func will NOT be called
    /// \param prepare_arg argument used to passed into the lazy preprocessing function
    #[link_name = "\u{1}_RabitAllreduce"]
    pub fn RabitAllreduce(
        sendrecvbuf: *mut ::std::os::raw::c_void,
        count: usize,
        enum_dtype: ::std::os::raw::c_int,
        enum_op: ::std::os::raw::c_int,
        prepare_fun: ::std::option::Option<unsafe extern "C" fn(arg: *mut ::std::os::raw::c_void)>,
        prepare_arg: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    /// \brief load latest check point
    /// \param out_global_model hold output of serialized global_model
    /// \param out_global_len the output length of serialized global model
    /// \param out_local_model hold output of serialized local_model, can be NULL
    /// \param out_local_len the output length of serialized local model, can be NULL
    ///
    /// \return the version number of check point loaded
    /// if returned version == 0, this means no model has been CheckPointed
    /// nothing will be touched
    #[link_name = "\u{1}_RabitLoadCheckPoint"]
    pub fn RabitLoadCheckPoint(
        out_global_model: *mut *mut ::std::os::raw::c_char,
        out_global_len: *mut rbt_ulong,
        out_local_model: *mut *mut ::std::os::raw::c_char,
        out_local_len: *mut rbt_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// \brief checkpoint the model, meaning we finished a stage of execution
    /// every time we call check point, there is a version number which will increase by one
    ///
    /// \param global_model hold content of serialized global_model
    /// \param global_len the content length of serialized global model
    /// \param local_model hold content of serialized local_model, can be NULL
    /// \param local_len the content length of serialized local model, can be NULL
    ///
    /// NOTE: local_model requires explicit replication of the model for fault-tolerance, which will
    /// bring replication cost in CheckPoint function. global_model do not need explicit replication.
    /// So only CheckPoint with global_model if possible
    #[link_name = "\u{1}_RabitCheckPoint"]
    pub fn RabitCheckPoint(
        global_model: *const ::std::os::raw::c_char,
        global_len: rbt_ulong,
        local_model: *const ::std::os::raw::c_char,
        local_len: rbt_ulong,
    );
}
extern "C" {
    /// \return version number of current stored model,
    /// which means how many calls to CheckPoint we made so far
    /// \return rabit version number
    #[link_name = "\u{1}_RabitVersionNumber"]
    pub fn RabitVersionNumber() -> ::std::os::raw::c_int;
}
extern "C" {
    /// \brief a Dummy function,
    /// used to cause force link of C API  into the  DLL.
    /// \code
    /// \/\/force link rabit C API library.
    /// static int must_link_rabit_ = RabitLinkTag();
    /// \endcode
    /// \return a dummy integer.
    #[link_name = "\u{1}_RabitLinkTag"]
    pub fn RabitLinkTag() -> ::std::os::raw::c_int;
}
pub type bst_ulong = u64;
/// \brief handle to DMatrix
pub type DMatrixHandle = *mut ::std::os::raw::c_void;
/// \brief handle to Booster
pub type BoosterHandle = *mut ::std::os::raw::c_void;
/// \brief handle to a data iterator
pub type DataIterHandle = *mut ::std::os::raw::c_void;
/// \brief handle to a internal data holder.
pub type DataHolderHandle = *mut ::std::os::raw::c_void;
/// \brief Mini batch used in XGBoost Data Iteration
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XGBoostBatchCSR {
    /// \brief number of rows in the minibatch
    pub size: usize,
    pub offset: *mut ::std::os::raw::c_long,
    /// \brief labels of each instance
    pub label: *mut f32,
    /// \brief weight of each instance, can be NULL
    pub weight: *mut f32,
    /// \brief feature index
    pub index: *mut ::std::os::raw::c_int,
    /// \brief feature values
    pub value: *mut f32,
}
#[test]
fn bindgen_test_layout_XGBoostBatchCSR() {
    assert_eq!(
        ::std::mem::size_of::<XGBoostBatchCSR>(),
        48usize,
        concat!("Size of: ", stringify!(XGBoostBatchCSR))
    );
    assert_eq!(
        ::std::mem::align_of::<XGBoostBatchCSR>(),
        8usize,
        concat!("Alignment of ", stringify!(XGBoostBatchCSR))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XGBoostBatchCSR>())).size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XGBoostBatchCSR),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XGBoostBatchCSR>())).offset as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XGBoostBatchCSR),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XGBoostBatchCSR>())).label as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XGBoostBatchCSR),
            "::",
            stringify!(label)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XGBoostBatchCSR>())).weight as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XGBoostBatchCSR),
            "::",
            stringify!(weight)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XGBoostBatchCSR>())).index as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XGBoostBatchCSR),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XGBoostBatchCSR>())).value as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(XGBoostBatchCSR),
            "::",
            stringify!(value)
        )
    );
}
/// \brief Callback to set the data to handle,
/// \param handle The handle to the callback.
/// \param batch The data content to be set.
pub type XGBCallbackSetData = ::std::option::Option<
    unsafe extern "C" fn(handle: DataHolderHandle, batch: XGBoostBatchCSR) -> ::std::os::raw::c_int,
>;
/// \brief The data reading callback function.
/// The iterator will be able to give subset of batch in the data.
///
/// If there is data, the function will call set_function to set the data.
///
/// \param data_handle The handle to the callback.
/// \param set_function The batch returned by the iterator
/// \param set_function_handle The handle to be passed to set function.
/// \return 0 if we are reaching the end and batch is not returned.
pub type XGBCallbackDataIterNext = ::std::option::Option<
    unsafe extern "C" fn(
        data_handle: DataIterHandle,
        set_function: XGBCallbackSetData,
        set_function_handle: DataHolderHandle,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    /// \brief get string message of the last error
    ///
    /// all function in this file will return 0 when success
    /// and -1 when an error occurred,
    /// XGBGetLastError can be called to retrieve the error
    ///
    /// this function is thread safe and can be called by different thread
    /// \return const char* error information
    #[link_name = "\u{1}_XGBGetLastError"]
    pub fn XGBGetLastError() -> *const ::std::os::raw::c_char;
}
extern "C" {
    /// \brief register callback function for LOG(INFO) messages -- helpful messages
    /// that are not errors.
    /// Note: this function can be called by multiple threads. The callback function
    /// will run on the thread that registered it
    /// \return 0 for success, -1 for failure
    #[link_name = "\u{1}_XGBRegisterLogCallback"]
    pub fn XGBRegisterLogCallback(
        callback: ::std::option::Option<unsafe extern "C" fn(arg1: *const ::std::os::raw::c_char)>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// \brief load a data matrix
    /// \param fname the name of the file
    /// \param silent whether print messages during loading
    /// \param out a loaded data matrix
    /// \return 0 when success, -1 when failure happens
    #[link_name = "\u{1}_XGDMatrixCreateFromFile"]
    pub fn XGDMatrixCreateFromFile(
        fname: *const ::std::os::raw::c_char,
        silent: ::std::os::raw::c_int,
        out: *mut DMatrixHandle,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// \brief Create a DMatrix from a data iterator.
    /// \param data_handle The handle to the data.
    /// \param callback The callback to get the data.
    /// \param cache_info Additional information about cache file, can be null.
    /// \param out The created DMatrix
    /// \return 0 when success, -1 when failure happens.
    #[link_name = "\u{1}_XGDMatrixCreateFromDataIter"]
    pub fn XGDMatrixCreateFromDataIter(
        data_handle: DataIterHandle,
        callback: XGBCallbackDataIterNext,
        cache_info: *const ::std::os::raw::c_char,
        out: *mut DMatrixHandle,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// \brief create a matrix content from CSR format
    /// \param indptr pointer to row headers
    /// \param indices findex
    /// \param data fvalue
    /// \param nindptr number of rows in the matrix + 1
    /// \param nelem number of nonzero elements in the matrix
    /// \param num_col number of columns; when it's set to 0, then guess from data
    /// \param out created dmatrix
    /// \return 0 when success, -1 when failure happens
    #[link_name = "\u{1}_XGDMatrixCreateFromCSREx"]
    pub fn XGDMatrixCreateFromCSREx(
        indptr: *const usize,
        indices: *const ::std::os::raw::c_uint,
        data: *const f32,
        nindptr: usize,
        nelem: usize,
        num_col: usize,
        out: *mut DMatrixHandle,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// \deprecated
    /// \brief create a matrix content from CSR format
    /// \param indptr pointer to row headers
    /// \param indices findex
    /// \param data fvalue
    /// \param nindptr number of rows in the matrix + 1
    /// \param nelem number of nonzero elements in the matrix
    /// \param out created dmatrix
    /// \return 0 when success, -1 when failure happens
    #[link_name = "\u{1}_XGDMatrixCreateFromCSR"]
    pub fn XGDMatrixCreateFromCSR(
        indptr: *const bst_ulong,
        indices: *const ::std::os::raw::c_uint,
        data: *const f32,
        nindptr: bst_ulong,
        nelem: bst_ulong,
        out: *mut DMatrixHandle,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// \brief create a matrix content from CSC format
    /// \param col_ptr pointer to col headers
    /// \param indices findex
    /// \param data fvalue
    /// \param nindptr number of rows in the matrix + 1
    /// \param nelem number of nonzero elements in the matrix
    /// \param num_row number of rows; when it's set to 0, then guess from data
    /// \param out created dmatrix
    /// \return 0 when success, -1 when failure happens
    #[link_name = "\u{1}_XGDMatrixCreateFromCSCEx"]
    pub fn XGDMatrixCreateFromCSCEx(
        col_ptr: *const usize,
        indices: *const ::std::os::raw::c_uint,
        data: *const f32,
        nindptr: usize,
        nelem: usize,
        num_row: usize,
        out: *mut DMatrixHandle,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// \deprecated
    /// \brief create a matrix content from CSC format
    /// \param col_ptr pointer to col headers
    /// \param indices findex
    /// \param data fvalue
    /// \param nindptr number of rows in the matrix + 1
    /// \param nelem number of nonzero elements in the matrix
    /// \param out created dmatrix
    /// \return 0 when success, -1 when failure happens
    #[link_name = "\u{1}_XGDMatrixCreateFromCSC"]
    pub fn XGDMatrixCreateFromCSC(
        col_ptr: *const bst_ulong,
        indices: *const ::std::os::raw::c_uint,
        data: *const f32,
        nindptr: bst_ulong,
        nelem: bst_ulong,
        out: *mut DMatrixHandle,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// \brief create matrix content from dense matrix
    /// \param data pointer to the data space
    /// \param nrow number of rows
    /// \param ncol number columns
    /// \param missing which value to represent missing value
    /// \param out created dmatrix
    /// \return 0 when success, -1 when failure happens
    #[link_name = "\u{1}_XGDMatrixCreateFromMat"]
    pub fn XGDMatrixCreateFromMat(
        data: *const f32,
        nrow: bst_ulong,
        ncol: bst_ulong,
        missing: f32,
        out: *mut DMatrixHandle,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// \brief create matrix content from dense matrix
    /// \param data pointer to the data space
    /// \param nrow number of rows
    /// \param ncol number columns
    /// \param missing which value to represent missing value
    /// \param out created dmatrix
    /// \param nthread number of threads (up to maximum cores available, if <=0 use all cores)
    /// \return 0 when success, -1 when failure happens
    #[link_name = "\u{1}_XGDMatrixCreateFromMat_omp"]
    pub fn XGDMatrixCreateFromMat_omp(
        data: *const f32,
        nrow: bst_ulong,
        ncol: bst_ulong,
        missing: f32,
        out: *mut DMatrixHandle,
        nthread: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// \brief create matrix content from python data table
    /// \param data pointer to pointer to column data
    /// \param feature_stypes pointer to strings
    /// \param nrow number of rows
    /// \param ncol number columns
    /// \param out created dmatrix
    /// \param nthread number of threads (up to maximum cores available, if <=0 use all cores)
    /// \return 0 when success, -1 when failure happens
    #[link_name = "\u{1}_XGDMatrixCreateFromDT"]
    pub fn XGDMatrixCreateFromDT(
        data: *mut *mut ::std::os::raw::c_void,
        feature_stypes: *mut *const ::std::os::raw::c_char,
        nrow: bst_ulong,
        ncol: bst_ulong,
        out: *mut DMatrixHandle,
        nthread: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// \brief create a new dmatrix from sliced content of existing matrix
    /// \param handle instance of data matrix to be sliced
    /// \param idxset index set
    /// \param len length of index set
    /// \param out a sliced new matrix
    /// \return 0 when success, -1 when failure happens
    #[link_name = "\u{1}_XGDMatrixSliceDMatrix"]
    pub fn XGDMatrixSliceDMatrix(
        handle: DMatrixHandle,
        idxset: *const ::std::os::raw::c_int,
        len: bst_ulong,
        out: *mut DMatrixHandle,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// \brief free space in data matrix
    /// \return 0 when success, -1 when failure happens
    #[link_name = "\u{1}_XGDMatrixFree"]
    pub fn XGDMatrixFree(handle: DMatrixHandle) -> ::std::os::raw::c_int;
}
extern "C" {
    /// \brief load a data matrix into binary file
    /// \param handle a instance of data matrix
    /// \param fname file name
    /// \param silent print statistics when saving
    /// \return 0 when success, -1 when failure happens
    #[link_name = "\u{1}_XGDMatrixSaveBinary"]
    pub fn XGDMatrixSaveBinary(
        handle: DMatrixHandle,
        fname: *const ::std::os::raw::c_char,
        silent: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// \brief set float vector to a content in info
    /// \param handle a instance of data matrix
    /// \param field field name, can be label, weight
    /// \param array pointer to float vector
    /// \param len length of array
    /// \return 0 when success, -1 when failure happens
    #[link_name = "\u{1}_XGDMatrixSetFloatInfo"]
    pub fn XGDMatrixSetFloatInfo(
        handle: DMatrixHandle,
        field: *const ::std::os::raw::c_char,
        array: *const f32,
        len: bst_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// \brief set uint32 vector to a content in info
    /// \param handle a instance of data matrix
    /// \param field field name
    /// \param array pointer to unsigned int vector
    /// \param len length of array
    /// \return 0 when success, -1 when failure happens
    #[link_name = "\u{1}_XGDMatrixSetUIntInfo"]
    pub fn XGDMatrixSetUIntInfo(
        handle: DMatrixHandle,
        field: *const ::std::os::raw::c_char,
        array: *const ::std::os::raw::c_uint,
        len: bst_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// \brief set label of the training matrix
    /// \param handle a instance of data matrix
    /// \param group pointer to group size
    /// \param len length of array
    /// \return 0 when success, -1 when failure happens
    #[link_name = "\u{1}_XGDMatrixSetGroup"]
    pub fn XGDMatrixSetGroup(
        handle: DMatrixHandle,
        group: *const ::std::os::raw::c_uint,
        len: bst_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// \brief get float info vector from matrix
    /// \param handle a instance of data matrix
    /// \param field field name
    /// \param out_len used to set result length
    /// \param out_dptr pointer to the result
    /// \return 0 when success, -1 when failure happens
    #[link_name = "\u{1}_XGDMatrixGetFloatInfo"]
    pub fn XGDMatrixGetFloatInfo(
        handle: DMatrixHandle,
        field: *const ::std::os::raw::c_char,
        out_len: *mut bst_ulong,
        out_dptr: *mut *const f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// \brief get uint32 info vector from matrix
    /// \param handle a instance of data matrix
    /// \param field field name
    /// \param out_len The length of the field.
    /// \param out_dptr pointer to the result
    /// \return 0 when success, -1 when failure happens
    #[link_name = "\u{1}_XGDMatrixGetUIntInfo"]
    pub fn XGDMatrixGetUIntInfo(
        handle: DMatrixHandle,
        field: *const ::std::os::raw::c_char,
        out_len: *mut bst_ulong,
        out_dptr: *mut *const ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// \brief get number of rows.
    /// \param handle the handle to the DMatrix
    /// \param out The address to hold number of rows.
    /// \return 0 when success, -1 when failure happens
    #[link_name = "\u{1}_XGDMatrixNumRow"]
    pub fn XGDMatrixNumRow(handle: DMatrixHandle, out: *mut bst_ulong) -> ::std::os::raw::c_int;
}
extern "C" {
    /// \brief get number of columns
    /// \param handle the handle to the DMatrix
    /// \param out The output of number of columns
    /// \return 0 when success, -1 when failure happens
    #[link_name = "\u{1}_XGDMatrixNumCol"]
    pub fn XGDMatrixNumCol(handle: DMatrixHandle, out: *mut bst_ulong) -> ::std::os::raw::c_int;
}
extern "C" {
    /// \brief create xgboost learner
    /// \param dmats matrices that are set to be cached
    /// \param len length of dmats
    /// \param out handle to the result booster
    /// \return 0 when success, -1 when failure happens
    #[link_name = "\u{1}_XGBoosterCreate"]
    pub fn XGBoosterCreate(
        dmats: *const DMatrixHandle,
        len: bst_ulong,
        out: *mut BoosterHandle,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// \brief free obj in handle
    /// \param handle handle to be freed
    /// \return 0 when success, -1 when failure happens
    #[link_name = "\u{1}_XGBoosterFree"]
    pub fn XGBoosterFree(handle: BoosterHandle) -> ::std::os::raw::c_int;
}
extern "C" {
    /// \brief set parameters
    /// \param handle handle
    /// \param name  parameter name
    /// \param value value of parameter
    /// \return 0 when success, -1 when failure happens
    #[link_name = "\u{1}_XGBoosterSetParam"]
    pub fn XGBoosterSetParam(
        handle: BoosterHandle,
        name: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// \brief update the model in one round using dtrain
    /// \param handle handle
    /// \param iter current iteration rounds
    /// \param dtrain training data
    /// \return 0 when success, -1 when failure happens
    #[link_name = "\u{1}_XGBoosterUpdateOneIter"]
    pub fn XGBoosterUpdateOneIter(
        handle: BoosterHandle,
        iter: ::std::os::raw::c_int,
        dtrain: DMatrixHandle,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// \brief update the model, by directly specify gradient and second order gradient,
    /// this can be used to replace UpdateOneIter, to support customized loss function
    /// \param handle handle
    /// \param dtrain training data
    /// \param grad gradient statistics
    /// \param hess second order gradient statistics
    /// \param len length of grad/hess array
    /// \return 0 when success, -1 when failure happens
    #[link_name = "\u{1}_XGBoosterBoostOneIter"]
    pub fn XGBoosterBoostOneIter(
        handle: BoosterHandle,
        dtrain: DMatrixHandle,
        grad: *mut f32,
        hess: *mut f32,
        len: bst_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// \brief get evaluation statistics for xgboost
    /// \param handle handle
    /// \param iter current iteration rounds
    /// \param dmats pointers to data to be evaluated
    /// \param evnames pointers to names of each data
    /// \param len length of dmats
    /// \param out_result the string containing evaluation statistics
    /// \return 0 when success, -1 when failure happens
    #[link_name = "\u{1}_XGBoosterEvalOneIter"]
    pub fn XGBoosterEvalOneIter(
        handle: BoosterHandle,
        iter: ::std::os::raw::c_int,
        dmats: *mut DMatrixHandle,
        evnames: *mut *const ::std::os::raw::c_char,
        len: bst_ulong,
        out_result: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// \brief make prediction based on dmat
    /// \param handle handle
    /// \param dmat data matrix
    /// \param option_mask bit-mask of options taken in prediction, possible values
    /// 0:normal prediction
    /// 1:output margin instead of transformed value
    /// 2:output leaf index of trees instead of leaf value, note leaf index is unique per tree
    /// 4:output feature contributions to individual predictions
    /// \param ntree_limit limit number of trees used for prediction, this is only valid for boosted trees
    /// when the parameter is set to 0, we will use all the trees
    /// \param out_len used to store length of returning result
    /// \param out_result used to set a pointer to array
    /// \return 0 when success, -1 when failure happens
    #[link_name = "\u{1}_XGBoosterPredict"]
    pub fn XGBoosterPredict(
        handle: BoosterHandle,
        dmat: DMatrixHandle,
        option_mask: ::std::os::raw::c_int,
        ntree_limit: ::std::os::raw::c_uint,
        out_len: *mut bst_ulong,
        out_result: *mut *const f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// \brief load model from existing file
    /// \param handle handle
    /// \param fname file name
    /// \return 0 when success, -1 when failure happens
    #[link_name = "\u{1}_XGBoosterLoadModel"]
    pub fn XGBoosterLoadModel(
        handle: BoosterHandle,
        fname: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// \brief save model into existing file
    /// \param handle handle
    /// \param fname file name
    /// \return 0 when success, -1 when failure happens
    #[link_name = "\u{1}_XGBoosterSaveModel"]
    pub fn XGBoosterSaveModel(
        handle: BoosterHandle,
        fname: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// \brief load model from in memory buffer
    /// \param handle handle
    /// \param buf pointer to the buffer
    /// \param len the length of the buffer
    /// \return 0 when success, -1 when failure happens
    #[link_name = "\u{1}_XGBoosterLoadModelFromBuffer"]
    pub fn XGBoosterLoadModelFromBuffer(
        handle: BoosterHandle,
        buf: *const ::std::os::raw::c_void,
        len: bst_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// \brief save model into binary raw bytes, return header of the array
    /// user must copy the result out, before next xgboost call
    /// \param handle handle
    /// \param out_len the argument to hold the output length
    /// \param out_dptr the argument to hold the output data pointer
    /// \return 0 when success, -1 when failure happens
    #[link_name = "\u{1}_XGBoosterGetModelRaw"]
    pub fn XGBoosterGetModelRaw(
        handle: BoosterHandle,
        out_len: *mut bst_ulong,
        out_dptr: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// \brief dump model, return array of strings representing model dump
    /// \param handle handle
    /// \param fmap  name to fmap can be empty string
    /// \param with_stats whether to dump with statistics
    /// \param out_len length of output array
    /// \param out_dump_array pointer to hold representing dump of each model
    /// \return 0 when success, -1 when failure happens
    #[link_name = "\u{1}_XGBoosterDumpModel"]
    pub fn XGBoosterDumpModel(
        handle: BoosterHandle,
        fmap: *const ::std::os::raw::c_char,
        with_stats: ::std::os::raw::c_int,
        out_len: *mut bst_ulong,
        out_dump_array: *mut *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// \brief dump model, return array of strings representing model dump
    /// \param handle handle
    /// \param fmap  name to fmap can be empty string
    /// \param with_stats whether to dump with statistics
    /// \param format the format to dump the model in
    /// \param out_len length of output array
    /// \param out_dump_array pointer to hold representing dump of each model
    /// \return 0 when success, -1 when failure happens
    #[link_name = "\u{1}_XGBoosterDumpModelEx"]
    pub fn XGBoosterDumpModelEx(
        handle: BoosterHandle,
        fmap: *const ::std::os::raw::c_char,
        with_stats: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        out_len: *mut bst_ulong,
        out_dump_array: *mut *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// \brief dump model, return array of strings representing model dump
    /// \param handle handle
    /// \param fnum number of features
    /// \param fname names of features
    /// \param ftype types of features
    /// \param with_stats whether to dump with statistics
    /// \param out_len length of output array
    /// \param out_models pointer to hold representing dump of each model
    /// \return 0 when success, -1 when failure happens
    #[link_name = "\u{1}_XGBoosterDumpModelWithFeatures"]
    pub fn XGBoosterDumpModelWithFeatures(
        handle: BoosterHandle,
        fnum: ::std::os::raw::c_int,
        fname: *mut *const ::std::os::raw::c_char,
        ftype: *mut *const ::std::os::raw::c_char,
        with_stats: ::std::os::raw::c_int,
        out_len: *mut bst_ulong,
        out_models: *mut *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// \brief dump model, return array of strings representing model dump
    /// \param handle handle
    /// \param fnum number of features
    /// \param fname names of features
    /// \param ftype types of features
    /// \param with_stats whether to dump with statistics
    /// \param format the format to dump the model in
    /// \param out_len length of output array
    /// \param out_models pointer to hold representing dump of each model
    /// \return 0 when success, -1 when failure happens
    #[link_name = "\u{1}_XGBoosterDumpModelExWithFeatures"]
    pub fn XGBoosterDumpModelExWithFeatures(
        handle: BoosterHandle,
        fnum: ::std::os::raw::c_int,
        fname: *mut *const ::std::os::raw::c_char,
        ftype: *mut *const ::std::os::raw::c_char,
        with_stats: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        out_len: *mut bst_ulong,
        out_models: *mut *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// \brief Get string attribute from Booster.
    /// \param handle handle
    /// \param key The key of the attribute.
    /// \param out The result attribute, can be NULL if the attribute do not exist.
    /// \param success Whether the result is contained in out.
    /// \return 0 when success, -1 when failure happens
    #[link_name = "\u{1}_XGBoosterGetAttr"]
    pub fn XGBoosterGetAttr(
        handle: BoosterHandle,
        key: *const ::std::os::raw::c_char,
        out: *mut *const ::std::os::raw::c_char,
        success: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// \brief Set or delete string attribute.
    ///
    /// \param handle handle
    /// \param key The key of the attribute.
    /// \param value The value to be saved.
    /// If nullptr, the attribute would be deleted.
    /// \return 0 when success, -1 when failure happens
    #[link_name = "\u{1}_XGBoosterSetAttr"]
    pub fn XGBoosterSetAttr(
        handle: BoosterHandle,
        key: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// \brief Get the names of all attribute from Booster.
    /// \param handle handle
    /// \param out_len the argument to hold the output length
    /// \param out pointer to hold the output attribute stings
    /// \return 0 when success, -1 when failure happens
    #[link_name = "\u{1}_XGBoosterGetAttrNames"]
    pub fn XGBoosterGetAttrNames(
        handle: BoosterHandle,
        out_len: *mut bst_ulong,
        out: *mut *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// \brief Initialize the booster from rabit checkpoint.
    /// This is used in distributed training API.
    /// \param handle handle
    /// \param version The output version of the model.
    /// \return 0 when success, -1 when failure happens
    #[link_name = "\u{1}_XGBoosterLoadRabitCheckpoint"]
    pub fn XGBoosterLoadRabitCheckpoint(
        handle: BoosterHandle,
        version: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    /// \brief Save the current checkpoint to rabit.
    /// \param handle handle
    /// \return 0 when success, -1 when failure happens
    #[link_name = "\u{1}_XGBoosterSaveRabitCheckpoint"]
    pub fn XGBoosterSaveRabitCheckpoint(handle: BoosterHandle) -> ::std::os::raw::c_int;
}
pub type __builtin_va_list = *mut ::std::os::raw::c_char;
